{"version":3,"sources":["/home/luis/Documentos/workspace/ventas_front/ventas-front/node_modules/primeng/fesm2015/primeng-messages.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eAuFE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAkCqB,AA+CpB;;;;;EAGD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAOiB","file":"primeng-messages.js","sourcesContent":["import { EventEmitter, Optional, Input, Output, Component, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { MessageService } from 'primeng/api';\n\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nlet Messages = class Messages {\n    constructor(messageService) {\n        this.messageService = messageService;\n        this.closable = true;\n        this.enableService = true;\n        this.escape = true;\n        this.showTransitionOptions = '300ms ease-out';\n        this.hideTransitionOptions = '250ms ease-in';\n        this.valueChange = new EventEmitter();\n    }\n    ngOnInit() {\n        if (this.messageService && this.enableService) {\n            this.messageSubscription = this.messageService.messageObserver.subscribe((messages) => {\n                if (messages) {\n                    if (messages instanceof Array) {\n                        let filteredMessages = messages.filter(m => this.key === m.key);\n                        this.value = this.value ? [...this.value, ...filteredMessages] : [...filteredMessages];\n                    }\n                    else if (this.key === messages.key) {\n                        this.value = this.value ? [...this.value, ...[messages]] : [messages];\n                    }\n                }\n            });\n            this.clearSubscription = this.messageService.clearObserver.subscribe(key => {\n                if (key) {\n                    if (this.key === key) {\n                        this.value = null;\n                    }\n                }\n                else {\n                    this.value = null;\n                }\n            });\n        }\n    }\n    hasMessages() {\n        return this.value && this.value.length > 0;\n    }\n    getSeverityClass() {\n        return this.value[0].severity;\n    }\n    clear(event) {\n        this.value = [];\n        this.valueChange.emit(this.value);\n        event.preventDefault();\n    }\n    get icon() {\n        let icon = null;\n        if (this.hasMessages()) {\n            let msg = this.value[0];\n            switch (msg.severity) {\n                case 'success':\n                    icon = 'pi-check';\n                    break;\n                case 'info':\n                    icon = 'pi-info-circle';\n                    break;\n                case 'error':\n                    icon = 'pi-times';\n                    break;\n                case 'warn':\n                    icon = 'pi-exclamation-triangle';\n                    break;\n                default:\n                    icon = 'pi-info-circle';\n                    break;\n            }\n        }\n        return icon;\n    }\n    ngOnDestroy() {\n        if (this.messageSubscription) {\n            this.messageSubscription.unsubscribe();\n        }\n        if (this.clearSubscription) {\n            this.clearSubscription.unsubscribe();\n        }\n    }\n};\nMessages.ctorParameters = () => [\n    { type: MessageService, decorators: [{ type: Optional }] }\n];\n__decorate([\n    Input()\n], Messages.prototype, \"value\", void 0);\n__decorate([\n    Input()\n], Messages.prototype, \"closable\", void 0);\n__decorate([\n    Input()\n], Messages.prototype, \"style\", void 0);\n__decorate([\n    Input()\n], Messages.prototype, \"styleClass\", void 0);\n__decorate([\n    Input()\n], Messages.prototype, \"enableService\", void 0);\n__decorate([\n    Input()\n], Messages.prototype, \"key\", void 0);\n__decorate([\n    Input()\n], Messages.prototype, \"escape\", void 0);\n__decorate([\n    Input()\n], Messages.prototype, \"showTransitionOptions\", void 0);\n__decorate([\n    Input()\n], Messages.prototype, \"hideTransitionOptions\", void 0);\n__decorate([\n    Output()\n], Messages.prototype, \"valueChange\", void 0);\nMessages = __decorate([\n    Component({\n        selector: 'p-messages',\n        template: `\n        <div *ngIf=\"hasMessages()\" class=\"ui-messages ui-widget ui-corner-all\"\n                    [ngClass]=\"{'ui-messages-info':(value[0].severity === 'info'),\n                    'ui-messages-warn':(value[0].severity === 'warn'),\n                    'ui-messages-error':(value[0].severity === 'error'),\n                    'ui-messages-success':(value[0].severity === 'success')}\" role=\"alert\"\n                    [ngStyle]=\"style\" [class]=\"styleClass\" [@messageAnimation]=\"{value: 'visible', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\">\n            <a tabindex=\"0\" class=\"ui-messages-close\" (click)=\"clear($event)\" (keydown.enter)=\"clear($event)\" *ngIf=\"closable\">\n                <i class=\"pi pi-times\"></i>\n            </a>\n            <span class=\"ui-messages-icon pi\" [ngClass]=\"icon\"></span>\n            <ul>\n                <li *ngFor=\"let msg of value\">\n                    <div *ngIf=\"!escape; else escapeOut\">\n                        <span *ngIf=\"msg.summary\" class=\"ui-messages-summary\" [innerHTML]=\"msg.summary\"></span>\n                        <span *ngIf=\"msg.detail\" class=\"ui-messages-detail\" [innerHTML]=\"msg.detail\"></span>\n                    </div>\n                    <ng-template #escapeOut> \n                        <span *ngIf=\"msg.summary\" class=\"ui-messages-summary\">{{msg.summary}}</span>\n                        <span *ngIf=\"msg.detail\" class=\"ui-messages-detail\">{{msg.detail}}</span>\n                    </ng-template>\n                </li>\n            </ul>\n        </div>\n    `,\n        animations: [\n            trigger('messageAnimation', [\n                state('visible', style({\n                    transform: 'translateY(0)',\n                    opacity: 1\n                })),\n                transition('void => *', [\n                    style({ transform: 'translateY(-25%)', opacity: 0 }),\n                    animate('{{showTransitionParams}}')\n                ]),\n                transition('* => void', [\n                    animate(('{{hideTransitionParams}}'), style({\n                        opacity: 0,\n                        transform: 'translateY(-25%)'\n                    }))\n                ])\n            ])\n        ]\n    }),\n    __param(0, Optional())\n], Messages);\nlet MessagesModule = class MessagesModule {\n};\nMessagesModule = __decorate([\n    NgModule({\n        imports: [CommonModule],\n        exports: [Messages],\n        declarations: [Messages]\n    })\n], MessagesModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Messages, MessagesModule };\n"]}