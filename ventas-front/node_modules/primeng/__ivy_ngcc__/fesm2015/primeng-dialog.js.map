{"version":3,"sources":["/home/luis/Documentos/workspace/ventas_front/ventas-front/node_modules/primeng/fesm2015/primeng-dialog.js"],"names":[],"mappingseAubE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uCA8HqC,AA4C5B;;;;;EAET;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAOe","file":"primeng-dialog.js","sourcesContent":["import { EventEmitter, ElementRef, Renderer2, NgZone, ChangeDetectorRef, Input, ContentChildren, ViewChild, Output, Component, NgModule } from '@angular/core';\nimport { animation, style, animate, trigger, transition, useAnimation } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport { DomHandler } from 'primeng/dom';\nimport { Header, Footer, SharedModule } from 'primeng/api';\n\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nlet idx = 0;\nconst showAnimation = animation([\n    style({ transform: '{{transform}}', opacity: 0 }),\n    animate('{{transition}}', style({ transform: 'none', opacity: 1 }))\n]);\nconst hideAnimation = animation([\n    animate('{{transition}}', style({ transform: '{{transform}}', opacity: 0 }))\n]);\nlet Dialog = class Dialog {\n    constructor(el, renderer, zone, cd) {\n        this.el = el;\n        this.renderer = renderer;\n        this.zone = zone;\n        this.cd = cd;\n        this.draggable = true;\n        this.resizable = true;\n        this.closeOnEscape = true;\n        this.closable = true;\n        this.showHeader = true;\n        this.blockScroll = false;\n        this.autoZIndex = true;\n        this.baseZIndex = 0;\n        this.minX = 0;\n        this.minY = 0;\n        this.focusOnShow = true;\n        this.keepInViewport = true;\n        this.focusTrap = true;\n        this.transitionOptions = '150ms cubic-bezier(0, 0, 0.2, 1)';\n        this.closeIcon = 'pi pi-times';\n        this.minimizeIcon = 'pi pi-window-minimize';\n        this.maximizeIcon = 'pi pi-window-maximize';\n        this.onShow = new EventEmitter();\n        this.onHide = new EventEmitter();\n        this.visibleChange = new EventEmitter();\n        this.id = `ui-dialog-${idx++}`;\n        this._style = {};\n        this._position = \"center\";\n        this.transformOptions = \"scale(0.7)\";\n    }\n    get responsive() {\n        return false;\n    }\n    ;\n    set responsive(_responsive) {\n        console.log(\"Responsive property is deprecated.\");\n    }\n    get breakpoint() {\n        return 649;\n    }\n    ;\n    set breakpoint(_breakpoint) {\n        console.log(\"Breakpoint property is not utilized and deprecated, use CSS media queries instead.\");\n    }\n    get visible() {\n        return this._visible;\n    }\n    set visible(value) {\n        this._visible = value;\n        if (this._visible && !this.maskVisible) {\n            this.maskVisible = true;\n        }\n    }\n    get style() {\n        return this._style;\n    }\n    set style(value) {\n        if (value) {\n            this._style = Object.assign({}, value);\n            this.originalStyle = value;\n        }\n    }\n    get position() {\n        return this._position;\n    }\n    ;\n    set position(value) {\n        this._position = value;\n        switch (value) {\n            case 'topleft':\n            case 'bottomleft':\n            case 'left':\n                this.transformOptions = \"translate3d(-100%, 0px, 0px)\";\n                break;\n            case 'topright':\n            case 'bottomright':\n            case 'right':\n                this.transformOptions = \"translate3d(100%, 0px, 0px)\";\n                break;\n            case 'bottom':\n                this.transformOptions = \"translate3d(0px, 100%, 0px)\";\n                break;\n            case 'top':\n                this.transformOptions = \"translate3d(0px, -100%, 0px)\";\n                break;\n            default:\n                this.transformOptions = \"scale(0.7)\";\n                break;\n        }\n    }\n    focus() {\n        let focusable = DomHandler.findSingle(this.container, 'button');\n        if (focusable) {\n            this.zone.runOutsideAngular(() => {\n                setTimeout(() => focusable.focus(), 5);\n            });\n        }\n    }\n    close(event) {\n        this.visibleChange.emit(false);\n        event.preventDefault();\n    }\n    enableModality() {\n        if (this.closable && this.dismissableMask) {\n            this.maskClickListener = this.renderer.listen(this.wrapper, 'click', (event) => {\n                if (!this.container.isSameNode(event.target) && !this.container.contains(event.target)) {\n                    this.close(event);\n                }\n            });\n        }\n        if (this.modal) {\n            DomHandler.addClass(document.body, 'ui-overflow-hidden');\n        }\n    }\n    disableModality() {\n        if (this.wrapper) {\n            if (this.dismissableMask) {\n                this.unbindMaskClickListener();\n            }\n            if (this.modal) {\n                DomHandler.removeClass(document.body, 'ui-overflow-hidden');\n            }\n            this.cd.detectChanges();\n        }\n    }\n    maximize() {\n        this.maximized = !this.maximized;\n        if (!this.modal && !this.blockScroll) {\n            if (this.maximized)\n                DomHandler.addClass(document.body, 'ui-overflow-hidden');\n            else\n                DomHandler.removeClass(document.body, 'ui-overflow-hidden');\n        }\n    }\n    unbindMaskClickListener() {\n        if (this.maskClickListener) {\n            this.maskClickListener();\n            this.maskClickListener = null;\n        }\n    }\n    moveOnTop() {\n        if (this.autoZIndex) {\n            this.container.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\n            this.wrapper.style.zIndex = String(this.baseZIndex + (DomHandler.zindex - 1));\n        }\n    }\n    getWrapperClass() {\n        let wrapperClass = { 'ui-widget-overlay ui-dialog-mask': this.modal, 'ui-dialog-mask-scrollblocker': this.modal || this.blockScroll };\n        wrapperClass[this.getPositionClass().toString()] = true;\n        return wrapperClass;\n    }\n    getPositionClass() {\n        const positions = ['left', 'right', 'top', 'topleft', 'topright', 'bottom', 'bottomleft', 'bottomright'];\n        const pos = positions.find(item => item === this.position);\n        return pos ? `ui-dialog-${pos}` : '';\n    }\n    initDrag(event) {\n        if (DomHandler.hasClass(event.target, 'ui-dialog-titlebar-icon') || DomHandler.hasClass(event.target.parentElement, 'ui-dialog-titlebar-icon')) {\n            return;\n        }\n        if (this.draggable) {\n            this.dragging = true;\n            this.lastPageX = event.pageX;\n            this.lastPageY = event.pageY;\n            DomHandler.addClass(document.body, 'ui-unselectable-text');\n        }\n    }\n    onKeydown(event) {\n        if (this.focusTrap) {\n            if (event.which === 9) {\n                event.preventDefault();\n                let focusableElements = DomHandler.getFocusableElements(this.container);\n                if (focusableElements && focusableElements.length > 0) {\n                    if (!document.activeElement) {\n                        focusableElements[0].focus();\n                    }\n                    else {\n                        let focusedIndex = focusableElements.indexOf(document.activeElement);\n                        if (event.shiftKey) {\n                            if (focusedIndex == -1 || focusedIndex === 0)\n                                focusableElements[focusableElements.length - 1].focus();\n                            else\n                                focusableElements[focusedIndex - 1].focus();\n                        }\n                        else {\n                            if (focusedIndex == -1 || focusedIndex === (focusableElements.length - 1))\n                                focusableElements[0].focus();\n                            else\n                                focusableElements[focusedIndex + 1].focus();\n                        }\n                    }\n                }\n            }\n        }\n    }\n    onDrag(event) {\n        if (this.dragging) {\n            let containerWidth = DomHandler.getOuterWidth(this.container);\n            let containerHeight = DomHandler.getOuterHeight(this.container);\n            let deltaX = event.pageX - this.lastPageX;\n            let deltaY = event.pageY - this.lastPageY;\n            let offset = DomHandler.getOffset(this.container);\n            let leftPos = offset.left + deltaX;\n            let topPos = offset.top + deltaY;\n            let viewport = DomHandler.getViewport();\n            if (this.keepInViewport) {\n                if (leftPos >= this.minX && (leftPos + containerWidth) < viewport.width) {\n                    this._style.left = leftPos + 'px';\n                    this.lastPageX = event.pageX;\n                    this.container.style.left = leftPos + 'px';\n                }\n                if (topPos >= this.minY && (topPos + containerHeight) < viewport.height) {\n                    this._style.top = topPos + 'px';\n                    this.lastPageY = event.pageY;\n                    this.container.style.top = topPos + 'px';\n                }\n            }\n            else {\n                this.lastPageX = event.pageX;\n                this.container.style.left = leftPos + 'px';\n                this.lastPageY = event.pageY;\n                this.container.style.top = topPos + 'px';\n            }\n        }\n    }\n    endDrag(event) {\n        if (this.draggable) {\n            this.dragging = false;\n            DomHandler.removeClass(document.body, 'ui-unselectable-text');\n        }\n    }\n    initResize(event) {\n        if (this.resizable) {\n            this.resizing = true;\n            this.lastPageX = event.pageX;\n            this.lastPageY = event.pageY;\n            DomHandler.addClass(document.body, 'ui-unselectable-text');\n        }\n    }\n    onResize(event) {\n        if (this.resizing) {\n            let deltaX = event.pageX - this.lastPageX;\n            let deltaY = event.pageY - this.lastPageY;\n            let containerWidth = DomHandler.getOuterWidth(this.container);\n            let containerHeight = DomHandler.getOuterHeight(this.container);\n            let contentHeight = DomHandler.getOuterHeight(this.contentViewChild.nativeElement);\n            let newWidth = containerWidth + deltaX;\n            let newHeight = containerHeight + deltaY;\n            let minWidth = this.container.style.minWidth;\n            let minHeight = this.container.style.minHeight;\n            let offset = DomHandler.getOffset(this.container);\n            let viewport = DomHandler.getViewport();\n            if ((!minWidth || newWidth > parseInt(minWidth)) && (offset.left + newWidth) < viewport.width) {\n                this._style.width = newWidth + 'px';\n                this.container.style.width = this._style.width;\n            }\n            if ((!minHeight || newHeight > parseInt(minHeight)) && (offset.top + newHeight) < viewport.height) {\n                this.contentViewChild.nativeElement.style.height = contentHeight + deltaY + 'px';\n            }\n            this.lastPageX = event.pageX;\n            this.lastPageY = event.pageY;\n        }\n    }\n    onResizeEnd() {\n        if (this.resizing) {\n            this.resizing = false;\n            DomHandler.removeClass(document.body, 'ui-unselectable-text');\n        }\n    }\n    bindGlobalListeners() {\n        if (this.focusTrap) {\n            this.bindDocumentKeydownListener();\n        }\n        if (this.draggable) {\n            this.bindDocumentDragListener();\n            this.bindDocumentDragEndListener();\n        }\n        if (this.resizable) {\n            this.bindDocumentResizeListeners();\n        }\n        if (this.closeOnEscape && this.closable) {\n            this.bindDocumentEscapeListener();\n        }\n    }\n    unbindGlobalListeners() {\n        this.unbindDocumentDragListener();\n        this.unbindDocumentKeydownListener();\n        this.unbindDocumentDragEndListener();\n        this.unbindDocumentResizeListeners();\n        this.unbindDocumentEscapeListener();\n    }\n    bindDocumentKeydownListener() {\n        this.zone.runOutsideAngular(() => {\n            this.documentKeydownListener = this.onKeydown.bind(this);\n            window.document.addEventListener('keydown', this.documentKeydownListener);\n        });\n    }\n    unbindDocumentKeydownListener() {\n        if (this.documentKeydownListener) {\n            window.document.removeEventListener('keydown', this.documentKeydownListener);\n            this.documentKeydownListener = null;\n        }\n    }\n    bindDocumentDragListener() {\n        this.zone.runOutsideAngular(() => {\n            this.documentDragListener = this.onDrag.bind(this);\n            window.document.addEventListener('mousemove', this.documentDragListener);\n        });\n    }\n    unbindDocumentDragListener() {\n        if (this.documentDragListener) {\n            window.document.removeEventListener('mousemove', this.documentDragListener);\n            this.documentDragListener = null;\n        }\n    }\n    bindDocumentDragEndListener() {\n        this.zone.runOutsideAngular(() => {\n            this.documentDragEndListener = this.endDrag.bind(this);\n            window.document.addEventListener('mouseup', this.documentDragEndListener);\n        });\n    }\n    unbindDocumentDragEndListener() {\n        if (this.documentDragEndListener) {\n            window.document.removeEventListener('mouseup', this.documentDragEndListener);\n            this.documentDragEndListener = null;\n        }\n    }\n    bindDocumentResizeListeners() {\n        this.zone.runOutsideAngular(() => {\n            this.documentResizeListener = this.onResize.bind(this);\n            this.documentResizeEndListener = this.onResizeEnd.bind(this);\n            window.document.addEventListener('mousemove', this.documentResizeListener);\n            window.document.addEventListener('mouseup', this.documentResizeEndListener);\n        });\n    }\n    unbindDocumentResizeListeners() {\n        if (this.documentResizeListener && this.documentResizeEndListener) {\n            window.document.removeEventListener('mousemove', this.documentResizeListener);\n            window.document.removeEventListener('mouseup', this.documentResizeEndListener);\n            this.documentResizeListener = null;\n            this.documentResizeEndListener = null;\n        }\n    }\n    bindDocumentEscapeListener() {\n        this.documentEscapeListener = this.renderer.listen('document', 'keydown', (event) => {\n            if (event.which == 27) {\n                if (parseInt(this.container.style.zIndex) === (DomHandler.zindex + this.baseZIndex)) {\n                    this.close(event);\n                }\n            }\n        });\n    }\n    unbindDocumentEscapeListener() {\n        if (this.documentEscapeListener) {\n            this.documentEscapeListener();\n            this.documentEscapeListener = null;\n        }\n    }\n    appendContainer() {\n        if (this.appendTo) {\n            if (this.appendTo === 'body')\n                document.body.appendChild(this.container);\n            else\n                DomHandler.appendChild(this.container, this.appendTo);\n        }\n    }\n    restoreAppend() {\n        if (this.container && this.appendTo) {\n            this.el.nativeElement.appendChild(this.container);\n        }\n    }\n    onAnimationStart(event) {\n        switch (event.toState) {\n            case 'visible':\n                this.container = event.element;\n                this.wrapper = this.container.parentElement;\n                this.onShow.emit({});\n                this.appendContainer();\n                this.moveOnTop();\n                this.bindGlobalListeners();\n                if (this.modal) {\n                    this.enableModality();\n                }\n                if (!this.modal && this.blockScroll) {\n                    DomHandler.addClass(document.body, 'ui-overflow-hidden');\n                }\n                if (this.focusOnShow) {\n                    this.focus();\n                }\n                break;\n        }\n    }\n    onAnimationEnd(event) {\n        switch (event.toState) {\n            case 'void':\n                this.onContainerDestroy();\n                this.onHide.emit({});\n                break;\n        }\n    }\n    onContainerDestroy() {\n        this.unbindGlobalListeners();\n        this.dragging = false;\n        this.maskVisible = false;\n        if (this.maximized) {\n            DomHandler.removeClass(document.body, 'ui-overflow-hidden');\n            this.maximized = false;\n        }\n        if (this.modal) {\n            this.disableModality();\n        }\n        if (this.blockScroll) {\n            DomHandler.removeClass(document.body, 'ui-overflow-hidden');\n        }\n        this.container = null;\n        this.wrapper = null;\n        this._style = this.originalStyle ? Object.assign({}, this.originalStyle) : {};\n    }\n    ngOnDestroy() {\n        if (this.container) {\n            this.restoreAppend();\n            this.onContainerDestroy();\n        }\n    }\n};\nDialog.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Renderer2 },\n    { type: NgZone },\n    { type: ChangeDetectorRef }\n];\n__decorate([\n    Input()\n], Dialog.prototype, \"header\", void 0);\n__decorate([\n    Input()\n], Dialog.prototype, \"draggable\", void 0);\n__decorate([\n    Input()\n], Dialog.prototype, \"resizable\", void 0);\n__decorate([\n    Input()\n], Dialog.prototype, \"positionLeft\", void 0);\n__decorate([\n    Input()\n], Dialog.prototype, \"positionTop\", void 0);\n__decorate([\n    Input()\n], Dialog.prototype, \"contentStyle\", void 0);\n__decorate([\n    Input()\n], Dialog.prototype, \"modal\", void 0);\n__decorate([\n    Input()\n], Dialog.prototype, \"closeOnEscape\", void 0);\n__decorate([\n    Input()\n], Dialog.prototype, \"dismissableMask\", void 0);\n__decorate([\n    Input()\n], Dialog.prototype, \"rtl\", void 0);\n__decorate([\n    Input()\n], Dialog.prototype, \"closable\", void 0);\n__decorate([\n    Input()\n], Dialog.prototype, \"responsive\", null);\n__decorate([\n    Input()\n], Dialog.prototype, \"appendTo\", void 0);\n__decorate([\n    Input()\n], Dialog.prototype, \"styleClass\", void 0);\n__decorate([\n    Input()\n], Dialog.prototype, \"showHeader\", void 0);\n__decorate([\n    Input()\n], Dialog.prototype, \"breakpoint\", null);\n__decorate([\n    Input()\n], Dialog.prototype, \"blockScroll\", void 0);\n__decorate([\n    Input()\n], Dialog.prototype, \"autoZIndex\", void 0);\n__decorate([\n    Input()\n], Dialog.prototype, \"baseZIndex\", void 0);\n__decorate([\n    Input()\n], Dialog.prototype, \"minX\", void 0);\n__decorate([\n    Input()\n], Dialog.prototype, \"minY\", void 0);\n__decorate([\n    Input()\n], Dialog.prototype, \"focusOnShow\", void 0);\n__decorate([\n    Input()\n], Dialog.prototype, \"maximizable\", void 0);\n__decorate([\n    Input()\n], Dialog.prototype, \"keepInViewport\", void 0);\n__decorate([\n    Input()\n], Dialog.prototype, \"focusTrap\", void 0);\n__decorate([\n    Input()\n], Dialog.prototype, \"transitionOptions\", void 0);\n__decorate([\n    Input()\n], Dialog.prototype, \"closeIcon\", void 0);\n__decorate([\n    Input()\n], Dialog.prototype, \"minimizeIcon\", void 0);\n__decorate([\n    Input()\n], Dialog.prototype, \"maximizeIcon\", void 0);\n__decorate([\n    ContentChildren(Header, { descendants: false })\n], Dialog.prototype, \"headerFacet\", void 0);\n__decorate([\n    ContentChildren(Footer, { descendants: false })\n], Dialog.prototype, \"footerFacet\", void 0);\n__decorate([\n    ViewChild('titlebar')\n], Dialog.prototype, \"headerViewChild\", void 0);\n__decorate([\n    ViewChild('content')\n], Dialog.prototype, \"contentViewChild\", void 0);\n__decorate([\n    ViewChild('footer')\n], Dialog.prototype, \"footerViewChild\", void 0);\n__decorate([\n    Output()\n], Dialog.prototype, \"onShow\", void 0);\n__decorate([\n    Output()\n], Dialog.prototype, \"onHide\", void 0);\n__decorate([\n    Output()\n], Dialog.prototype, \"visibleChange\", void 0);\n__decorate([\n    Input()\n], Dialog.prototype, \"visible\", null);\n__decorate([\n    Input()\n], Dialog.prototype, \"style\", null);\n__decorate([\n    Input()\n], Dialog.prototype, \"position\", null);\nDialog = __decorate([\n    Component({\n        selector: 'p-dialog',\n        template: `\n    <div class=\"ui-dialog-wrapper\" [ngClass]=\"getWrapperClass()\" *ngIf=\"maskVisible\">\n        <div #container [ngClass]=\"{'ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow':true, 'ui-dialog-rtl':rtl,'ui-dialog-draggable':draggable,'ui-dialog-resizable':resizable, 'ui-dialog-maximized': maximized}\"\n            [ngStyle]=\"style\" [class]=\"styleClass\" *ngIf=\"visible\"\n            [@animation]=\"{value: 'visible', params: {transform: transformOptions, transition: transitionOptions}}\" (@animation.start)=\"onAnimationStart($event)\" (@animation.done)=\"onAnimationEnd($event)\" role=\"dialog\" [attr.aria-labelledby]=\"id + '-label'\">\n            <div #titlebar class=\"ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top\" (mousedown)=\"initDrag($event)\" *ngIf=\"showHeader\">\n                <span [attr.id]=\"id + '-label'\" class=\"ui-dialog-title\" *ngIf=\"header\">{{header}}</span>\n                <span [attr.id]=\"id + '-label'\" class=\"ui-dialog-title\" *ngIf=\"headerFacet && headerFacet.first\">\n                    <ng-content select=\"p-header\"></ng-content>\n                </span>\n                <div class=\"ui-dialog-titlebar-icons\">\n                    <a *ngIf=\"maximizable\" [ngClass]=\"{'ui-dialog-titlebar-icon ui-dialog-titlebar-maximize ui-corner-all':true}\" tabindex=\"0\" role=\"button\" (click)=\"maximize()\" (keydown.enter)=\"maximize()\">\n                        <span [ngClass]=\"maximized ? minimizeIcon : maximizeIcon\"></span>\n                    </a>\n                    <a *ngIf=\"closable\" [ngClass]=\"{'ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all':true}\" tabindex=\"0\" role=\"button\" (click)=\"close($event)\" (keydown.enter)=\"close($event)\">\n                        <span [class]=\"closeIcon\"></span>\n                    </a>\n                </div>\n            </div>\n            <div #content class=\"ui-dialog-content ui-widget-content\" [ngStyle]=\"contentStyle\">\n                <ng-content></ng-content>\n            </div>\n            <div #footer class=\"ui-dialog-footer ui-widget-content\" *ngIf=\"footerFacet && footerFacet.first\">\n                <ng-content select=\"p-footer\"></ng-content>\n            </div>\n            <div *ngIf=\"resizable\" class=\"ui-resizable-handle ui-resizable-se ui-icon ui-icon-gripsmall-diagonal-se\" style=\"z-index: 90;\" (mousedown)=\"initResize($event)\"></div>\n        </div>\n    </div>\n`,\n        animations: [\n            trigger('animation', [\n                transition('void => visible', [\n                    useAnimation(showAnimation)\n                ]),\n                transition('visible => void', [\n                    useAnimation(hideAnimation)\n                ])\n            ])\n        ]\n    })\n], Dialog);\nlet DialogModule = class DialogModule {\n};\nDialogModule = __decorate([\n    NgModule({\n        imports: [CommonModule],\n        exports: [Dialog, SharedModule],\n        declarations: [Dialog]\n    })\n], DialogModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Dialog, DialogModule };\n"]}